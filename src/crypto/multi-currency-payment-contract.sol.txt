// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MultiCurrencyPayment is Ownable {
    mapping(address => bool) public acceptedTokens;
    
    event PaymentReceived(address payer, address token, uint256 amount);
    event TokenAdded(address token);
    event TokenRemoved(address token);

    constructor() {
        acceptedTokens[address(0)] = true; // Accept ETH by default
    }

    function addAcceptedToken(address token) external onlyOwner {
        acceptedTokens[token] = true;
        emit TokenAdded(token);
    }

    function removeAcceptedToken(address token) external onlyOwner {
        acceptedTokens[token] = false;
        emit TokenRemoved(token);
    }

    function receivePayment(address token, uint256 amount) external payable {
        require(acceptedTokens[token], "Token not accepted");
        
        if (token == address(0)) {
            require(msg.value == amount, "Incorrect ETH amount");
        } else {
            require(msg.value == 0, "ETH not accepted for token payments");
            require(IERC20(token).transferFrom(msg.sender, address(this), amount), "Transfer failed");
        }
        
        emit PaymentReceived(msg.sender, token, amount);
    }

    function withdrawToken(address token, uint256 amount) external onlyOwner {
        if (token == address(0)) {
            payable(owner()).transfer(amount);
        } else {
            require(IERC20(token).transfer(owner(), amount), "Transfer failed");
        }
    }
}
